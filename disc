//TIA 19
//sujal jagtap
//B batch
//Disk-SCAN
#include <iostream>
#include <cstdlib>
#include <algorithm> // For std::sort

#define MAX_REQUESTS 100

// Function to simulate the SCAN algorithm
void scan(int requests[], int n, int initial_head, int max_track) {
    int total_seek_time = 0;
    int current_head = initial_head;
    std::sort(requests, requests + n);
    // Move to the right first
    total_seek_time += abs(current_head - max_track);
    current_head = max_track;
    std::cout << "Move to right end: " << max_track << " (Seek Time: " << abs(initial_head - max_track) << ")\n";

    // Process requests to the right
    for (int i = 0; i < n; i++) {
        if (requests[i] >= initial_head) {
            total_seek_time += abs(current_head - requests[i]);
            current_head = requests[i];
            std::cout << "Move to: " << current_head << " (Seek Time: " << abs(current_head - requests[i]) << ")\n";
        }
    }
    // Move to the left end
    total_seek_time += abs(current_head - 0);
    current_head = 0;
    std::cout << "Move to left end: 0 (Seek Time: " << abs(current_head) << ")\n";

    // Process requests to the left
    for (int i = n - 1; i >= 0; i--) {
        if (requests[i] < initial_head) {
            total_seek_time += abs(current_head - requests[i]);
            current_head = requests[i];
            std::cout << "Move to: " << current_head << " (Seek Time: " << abs(current_head - requests[i]) << ")\n";
        }
    }
    std::cout << "Total Seek Time: " << total_seek_time << "\n";
}

int main() {
    int n, initial_head, max_track;

    std::cout << "Enter number of requests: ";
    std::cin >> n;

    if (n <= 0 || n > MAX_REQUESTS) {
        std::cout << "Invalid number of requests.\n";
        return 1;
    }

    int requests[MAX_REQUESTS];

    std::cout << "Enter initial head position: ";
    std::cin >> initial_head;

    std::cout << "Enter maximum track position: ";
    std::cin >> max_track;

    std::cout << "Enter track positions:\n";
    for (int i = 0; i < n; i++) {
        std::cin >> requests[i];
        if (requests[i] < 0 || requests[i] > max_track) {
            std::cout << "Invalid request position.\n";
            return 1;
        }
    }

    scan(requests, n, initial_head, max_track);
    return 0;
}
student@student:~$ g++ diskscan.cpp
student@student:~$ ./a.out
Enter number of requests: 7
Enter initial head position: 50
Enter maximum track position: 199
Enter track positions:
82
170
43
140
24
16
190
Move to right end: 199 (Seek Time: 149)
Move to: 82 (Seek Time: 0)
Move to: 140 (Seek Time: 0)
Move to: 170 (Seek Time: 0)
Move to: 190 (Seek Time: 0)
Move to left end: 0 (Seek Time: 0)
Move to: 43 (Seek Time: 0)
Move to: 24 (Seek Time: 0)
Move to: 16 (Seek Time: 0)
Total Seek Time: 634
student@student:~$
